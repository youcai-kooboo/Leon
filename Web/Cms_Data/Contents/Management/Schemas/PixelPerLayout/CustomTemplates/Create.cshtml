
@using Kooboo.CMS.Content.Models;
@using Kooboo.CMS.Content.Query;
@{ var schema = (Kooboo.CMS.Content.Models.Schema)ViewData["Schema"];
    var allowedEdit = (bool)ViewData["AllowedEdit"];
    var allowedView = (bool)ViewData["AllowedView"];
    var parentUUID = ViewContext.RequestContext.AllRouteValues()["parentUUID"];
    var parentFolder=ViewContext.RequestContext.AllRouteValues()["parentFolder"];
}
@using(Html.BeginForm(ViewContext.RequestContext.AllRouteValues()["action"].ToString()
    , ViewContext.RequestContext.AllRouteValues()["controller"].ToString()
    , ViewContext.RequestContext.AllRouteValues()
    , FormMethod.Post
    , new RouteValueDictionary(new { enctype = "application/x-www-form-urlencoded" })))
{
    <table><input class='long' id="Site" name="Site" type="hidden" value="@(Site.Current.FullName)"  data-val-required="The Site field is required." data-val="true"/><tr>
            <th>
            <label for="Layout">Layout</label>
            </th>
            <td>
             @{ 
                            var layouts = ServiceFactory.LayoutManager.All(Site.Current, String.Empty);
                        }
                        <select name="Layout">
                            <option value="">Please select a layout</option>
                            @foreach(var each in layouts)
                            { 
                                <option value="@each.Name">@each.Name</option>
                            }
                        </select>
            @Html.ValidationMessageForColumn(((ISchema)ViewData["Schema"])["Layout"], null)
            
            </td>          
            </tr> 
            <tr>
            <th>
            <label for="Description">Description</label>
            </th>
            <td>
            <input class='long' id="Description" name="Description" type="text" value="@(Model.Description ?? "")" />            
            @Html.ValidationMessageForColumn(((ISchema)ViewData["Schema"])["Description"], null)
            
            </td>          
            </tr><tr>
            <th>
            <label for="Code">Code</label>
            </th>
            <td>
            <textarea class="extra-large" name="Code" >@(Model.Code ?? "")</textarea>             
            @Html.ValidationMessageForColumn(((ISchema)ViewData["Schema"])["Code"], null)
            
            </td>          
            </tr><tr>
            <th>
            <label for="StartDate">StartDate</label>
            </th>
            <td>
            <input class="long" id="StartDate" name="StartDate" type="text" value="@(Model.StartDate ==null ? "" : Model.StartDate.ToLocalTime().ToShortDateString())" /><script language="javascript" type="text/javascript">$(function(){$("#StartDate").datepicker();});</script>            
            @Html.ValidationMessageForColumn(((ISchema)ViewData["Schema"])["StartDate"], null)
            
            </td>          
                 </tr><tr>
                          <th>
                              <label for="StopDate">StopDate</label>
                          </th>
                          <td>
                              <input class="long" id="StopDate" name="StopDate" type="text" value="@(Model.StopDate ==null ? "" : Model.StopDate.ToLocalTime().ToShortDateString())" /><script language="javascript" type="text/javascript">$(function(){$("#StopDate").datepicker();});</script>            
                              @Html.ValidationMessageForColumn(((ISchema)ViewData["Schema"])["StopDate"], null)
            
                          </td>          
                      </tr>
        <tr>
            <th>
                <label for="DisplayPosition">DisplayPosition</label>
            </th>
            <td>
                @{ var dropDownDefault_DisplayPosition = @"";}
                <select name="DisplayPosition" class="long">
                    <option value="@(@"1")" @((Model.DisplayPosition != null && Model.DisplayPosition.ToString().ToLower() == @"1".ToLower()) || (Model.DisplayPosition == null && dropDownDefault_DisplayPosition.ToLower() == @"1".ToLower()) ? "selected" : "")>Head</option>
                    <option value="@(@"2")" @((Model.DisplayPosition != null && Model.DisplayPosition.ToString().ToLower() == @"2".ToLower()) || (Model.DisplayPosition == null && dropDownDefault_DisplayPosition.ToLower() == @"2".ToLower()) ? "selected" : "")>Body_Start</option>
                    <option value="@(@"3")" @((Model.DisplayPosition != null && Model.DisplayPosition.ToString().ToLower() == @"3".ToLower()) || (Model.DisplayPosition == null && dropDownDefault_DisplayPosition.ToLower() == @"3".ToLower()) ? "selected" : "")>Body_End</option>
                </select>
                @Html.ValidationMessageForColumn(((ISchema)ViewData["Schema"])["DisplayPosition"], null)

            </td>
        </tr>

            @if (allowedEdit) {
                <tr>
            <th>
           
            </th>
            <td>
            <input id='Published' name="Published" type="checkbox" @(Convert.ToBoolean(Model.Published)?"checked":"") value="true"/>
                                    <input type="hidden" value="false" name="Published"/>
            <label class="inline" for="Published">Published</label>
            @Html.ValidationMessageForColumn(((ISchema)ViewData["Schema"])["Published"], null)
            </td>          
            </tr>
            }
    @Html.Action("Categories", ViewContext.RequestContext.AllRouteValues())
    
    </table>
}